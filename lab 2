{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPlzPiLt/0jdULHwWbaxfwF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tomaszhe/informatyka-lab-2021/blob/main/lab%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_FfC2fcKv-qY"
      },
      "source": [
        "from math import sqrt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cSQyNReAv_N7"
      },
      "source": [
        "def funkcja (a, b, c):\n",
        "  if a == 0:\n",
        "      print('funkcja liniowa-jedno rozwiązanie =', -c/b)\n",
        "  if a != 0:\n",
        "    delta = (b*b) - 4*(a*c)\n",
        "    if delta < 0:\n",
        "      print('brak rozwiązan rzeczywistych')\n",
        "    if delta > 0:\n",
        "      x_1 = (-b-sqrt(delta))/2*a\n",
        "      x_2 = (-b+sqrt(delta))/2*a\n",
        "      print ('dwa rozwiązania rzeczywiste =', x_1, x_2)\n",
        "    if delta == 0:\n",
        "      print('jedno rozwiązanie =', -b/2*a)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1febgZJ498bP",
        "outputId": "257e6085-5dc4-4c75-bc59-5de222749f8b"
      },
      "source": [
        "funkcja (0, 1, 2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "funkcja liniowa-jedno rozwiązanie = -2.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fRuqf6LS3rOI",
        "outputId": "78992718-ed69-4110-fc88-01ad02fbdc91"
      },
      "source": [
        "funkcja (1, 2, 1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "jedno rozwiązanie = -1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EqBSLL6bxfYb",
        "outputId": "c135e1ab-47a3-44b2-8cad-ede2b22a2229"
      },
      "source": [
        "funkcja (3, 2, 1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "brak rozwiązan rzeczywistych\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lL1DOcm9-GGg",
        "outputId": "4176890f-8668-4e5b-e60c-b440f8a5dadb"
      },
      "source": [
        "funkcja (1, 10, 2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dwa rozwiązania rzeczywiste = -9.79583152331272 -0.2041684766872809\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KVvmt8A9oYuk"
      },
      "source": [
        "zad 3 Algorytm w wersji z odejmowaniem będzie wolniejszy ponieważ w sytuacji w której liczby będą znacznie się od siebie różnić to będziemy potrzebować paru kroków które w wersji z dzieleniem są zastąpione jednym krokiem. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O7fkFXynpNGg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "outputId": "a05f254e-75cf-40f6-c8f5-5e5f9496de32"
      },
      "source": [
        "odd = [bool(i % 2) for i in range(10)]\n",
        "numbers = [i in range(10)] # ponieważ począwszy od i=6 nie będzie w liście numbers nie bedzie elementu o odpowiadającym indeksie \n",
        "for i in range(len(numbers)):\n",
        "  if odd[numbers[i]]:\n",
        "    numbers.pop(i)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-006dfd6507af>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0modd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnumbers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumbers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0modd\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mnumbers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'i' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ToO52sEO9nYH"
      },
      "source": [
        "def g(n):\n",
        "  dzielniki = []\n",
        "  for i in range(1, n):\n",
        "    if (n % i == 0):\n",
        "      dzielniki.append(i)\n",
        "  print(dzielniki)\n",
        "  suma_dzielnikow = 0\n",
        "  for el in dzielniki:\n",
        "    suma_dzielnikow += el\n",
        "  print(suma_dzielnikow)"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xn_N_bW5QDtS",
        "outputId": "f6da87c9-0cb1-490f-a817-d13019a042b7"
      },
      "source": [
        "g(30)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 2, 3, 5, 6, 10, 15]\n",
            "42\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}